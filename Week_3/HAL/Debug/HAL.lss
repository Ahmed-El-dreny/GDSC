
HAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d7a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000d7a  00000dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015e4  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d23  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 94 06 	call	0xd28	; 0xd28 <main>
  7a:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_intial>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	10 82       	st	Z, r1
  94:	e7 e3       	ldi	r30, 0x37	; 55
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 83       	st	Z, r24
  9c:	e4 e3       	ldi	r30, 0x34	; 52
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
  a2:	e1 e3       	ldi	r30, 0x31	; 49
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	0f 90       	pop	r0
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <DIO_PortDir>:
    return local_Error_state;
}


ES_t DIO_PortDir(uint8 portID, uint8 portVal)
{
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	00 d0       	rcall	.+0      	; 0xbc <DIO_PortDir+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <DIO_PortDir+0x8>
  be:	0f 92       	push	r0
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	8a 83       	std	Y+2, r24	; 0x02
  c6:	6b 83       	std	Y+3, r22	; 0x03
	 ES_t local_Error_state = ES_NOK;
  c8:	19 82       	std	Y+1, r1	; 0x01

	 if (portID <= EN_PORTD)
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	84 30       	cpi	r24, 0x04	; 4
  ce:	a8 f5       	brcc	.+106    	; 0x13a <DIO_PortDir+0x84>
	 {
		 switch(portID)
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	28 2f       	mov	r18, r24
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	3d 83       	std	Y+5, r19	; 0x05
  d8:	2c 83       	std	Y+4, r18	; 0x04
  da:	8c 81       	ldd	r24, Y+4	; 0x04
  dc:	9d 81       	ldd	r25, Y+5	; 0x05
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	d1 f0       	breq	.+52     	; 0x118 <DIO_PortDir+0x62>
  e4:	2c 81       	ldd	r18, Y+4	; 0x04
  e6:	3d 81       	ldd	r19, Y+5	; 0x05
  e8:	22 30       	cpi	r18, 0x02	; 2
  ea:	31 05       	cpc	r19, r1
  ec:	2c f4       	brge	.+10     	; 0xf8 <DIO_PortDir+0x42>
  ee:	8c 81       	ldd	r24, Y+4	; 0x04
  f0:	9d 81       	ldd	r25, Y+5	; 0x05
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	61 f0       	breq	.+24     	; 0x10e <DIO_PortDir+0x58>
  f6:	1e c0       	rjmp	.+60     	; 0x134 <DIO_PortDir+0x7e>
  f8:	2c 81       	ldd	r18, Y+4	; 0x04
  fa:	3d 81       	ldd	r19, Y+5	; 0x05
  fc:	22 30       	cpi	r18, 0x02	; 2
  fe:	31 05       	cpc	r19, r1
 100:	81 f0       	breq	.+32     	; 0x122 <DIO_PortDir+0x6c>
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	9d 81       	ldd	r25, Y+5	; 0x05
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	81 f0       	breq	.+32     	; 0x12c <DIO_PortDir+0x76>
 10c:	13 c0       	rjmp	.+38     	; 0x134 <DIO_PortDir+0x7e>
		 {
		 	 case EN_PORTA:
		 		  DDRA = portVal;
 10e:	ea e3       	ldi	r30, 0x3A	; 58
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	80 83       	st	Z, r24
 116:	0e c0       	rjmp	.+28     	; 0x134 <DIO_PortDir+0x7e>
		 		  break;
		 	 case EN_PORTB:
		 		  DDRB = portVal;
 118:	e7 e3       	ldi	r30, 0x37	; 55
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	80 83       	st	Z, r24
 120:	09 c0       	rjmp	.+18     	; 0x134 <DIO_PortDir+0x7e>
		 		  break;
		 	 case EN_PORTC:
		 		  DDRC = portVal;
 122:	e4 e3       	ldi	r30, 0x34	; 52
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	80 83       	st	Z, r24
 12a:	04 c0       	rjmp	.+8      	; 0x134 <DIO_PortDir+0x7e>
		 		  break;
		 	 case EN_PORTD:
		 		  DDRD = portVal;
 12c:	e1 e3       	ldi	r30, 0x31	; 49
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	80 83       	st	Z, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_PortDir+0x88>
	 }

	 else
	 {
		 local_Error_state = ES_OUT_OF_RANGE;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
}
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	08 95       	ret

00000150 <DIO_PortValue>:


ES_t DIO_PortValue(uint8 portID, uint8 portVal)
{
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	00 d0       	rcall	.+0      	; 0x156 <DIO_PortValue+0x6>
 156:	00 d0       	rcall	.+0      	; 0x158 <DIO_PortValue+0x8>
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	8a 83       	std	Y+2, r24	; 0x02
 160:	6b 83       	std	Y+3, r22	; 0x03
	 ES_t local_Error_state = ES_NOK;
 162:	19 82       	std	Y+1, r1	; 0x01

	 if (portID <= EN_PORTD)
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	a8 f5       	brcc	.+106    	; 0x1d4 <DIO_PortValue+0x84>
	 {
		 switch(portID)
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	3d 83       	std	Y+5, r19	; 0x05
 172:	2c 83       	std	Y+4, r18	; 0x04
 174:	8c 81       	ldd	r24, Y+4	; 0x04
 176:	9d 81       	ldd	r25, Y+5	; 0x05
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	91 05       	cpc	r25, r1
 17c:	d1 f0       	breq	.+52     	; 0x1b2 <DIO_PortValue+0x62>
 17e:	2c 81       	ldd	r18, Y+4	; 0x04
 180:	3d 81       	ldd	r19, Y+5	; 0x05
 182:	22 30       	cpi	r18, 0x02	; 2
 184:	31 05       	cpc	r19, r1
 186:	2c f4       	brge	.+10     	; 0x192 <DIO_PortValue+0x42>
 188:	8c 81       	ldd	r24, Y+4	; 0x04
 18a:	9d 81       	ldd	r25, Y+5	; 0x05
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	61 f0       	breq	.+24     	; 0x1a8 <DIO_PortValue+0x58>
 190:	1e c0       	rjmp	.+60     	; 0x1ce <DIO_PortValue+0x7e>
 192:	2c 81       	ldd	r18, Y+4	; 0x04
 194:	3d 81       	ldd	r19, Y+5	; 0x05
 196:	22 30       	cpi	r18, 0x02	; 2
 198:	31 05       	cpc	r19, r1
 19a:	81 f0       	breq	.+32     	; 0x1bc <DIO_PortValue+0x6c>
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	9d 81       	ldd	r25, Y+5	; 0x05
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	91 05       	cpc	r25, r1
 1a4:	81 f0       	breq	.+32     	; 0x1c6 <DIO_PortValue+0x76>
 1a6:	13 c0       	rjmp	.+38     	; 0x1ce <DIO_PortValue+0x7e>
		 {
		 	 case EN_PORTA:
		 		  PORTA = portVal;
 1a8:	eb e3       	ldi	r30, 0x3B	; 59
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	80 83       	st	Z, r24
 1b0:	0e c0       	rjmp	.+28     	; 0x1ce <DIO_PortValue+0x7e>
		 		  break;
		 	 case EN_PORTB:
		 		  PORTB = portVal;
 1b2:	e8 e3       	ldi	r30, 0x38	; 56
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	80 83       	st	Z, r24
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <DIO_PortValue+0x7e>
		 		  break;
		 	 case EN_PORTC:
		 		  PORTC = portVal;
 1bc:	e5 e3       	ldi	r30, 0x35	; 53
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	80 83       	st	Z, r24
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <DIO_PortValue+0x7e>
		 		  break;
		 	 case EN_PORTD:
		 		  PORTD = portVal;
 1c6:	e2 e3       	ldi	r30, 0x32	; 50
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	80 83       	st	Z, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_PortValue+0x88>
	 }

	 else
	 {
		 local_Error_state = ES_OUT_OF_RANGE;
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <DIO_PortToggel>:


ES_t DIO_PortToggel(uint8 portID)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <DIO_PortToggel+0x6>
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <DIO_PortToggel+0x8>
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t local_Error_state = ES_NOK;
 1f8:	19 82       	std	Y+1, r1	; 0x01

	 if (portID <= EN_PORTD)
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_PortToggel+0x18>
 200:	41 c0       	rjmp	.+130    	; 0x284 <DIO_PortToggel+0x9a>
	 {
		 switch(portID)
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	3c 83       	std	Y+4, r19	; 0x04
 20a:	2b 83       	std	Y+3, r18	; 0x03
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	91 05       	cpc	r25, r1
 214:	e9 f0       	breq	.+58     	; 0x250 <DIO_PortToggel+0x66>
 216:	2b 81       	ldd	r18, Y+3	; 0x03
 218:	3c 81       	ldd	r19, Y+4	; 0x04
 21a:	22 30       	cpi	r18, 0x02	; 2
 21c:	31 05       	cpc	r19, r1
 21e:	2c f4       	brge	.+10     	; 0x22a <DIO_PortToggel+0x40>
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	9c 81       	ldd	r25, Y+4	; 0x04
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	61 f0       	breq	.+24     	; 0x240 <DIO_PortToggel+0x56>
 228:	2a c0       	rjmp	.+84     	; 0x27e <DIO_PortToggel+0x94>
 22a:	2b 81       	ldd	r18, Y+3	; 0x03
 22c:	3c 81       	ldd	r19, Y+4	; 0x04
 22e:	22 30       	cpi	r18, 0x02	; 2
 230:	31 05       	cpc	r19, r1
 232:	b1 f0       	breq	.+44     	; 0x260 <DIO_PortToggel+0x76>
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	9c 81       	ldd	r25, Y+4	; 0x04
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	91 05       	cpc	r25, r1
 23c:	c9 f0       	breq	.+50     	; 0x270 <DIO_PortToggel+0x86>
 23e:	1f c0       	rjmp	.+62     	; 0x27e <DIO_PortToggel+0x94>
		 {
		 	 case EN_PORTA:
		 		  PORTA = ~PORTA;
 240:	ab e3       	ldi	r26, 0x3B	; 59
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	eb e3       	ldi	r30, 0x3B	; 59
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 95       	com	r24
 24c:	8c 93       	st	X, r24
 24e:	17 c0       	rjmp	.+46     	; 0x27e <DIO_PortToggel+0x94>
		 		  break;
		 	 case EN_PORTB:
		 		  PORTB = ~PORTB;
 250:	a8 e3       	ldi	r26, 0x38	; 56
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e8 e3       	ldi	r30, 0x38	; 56
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 95       	com	r24
 25c:	8c 93       	st	X, r24
 25e:	0f c0       	rjmp	.+30     	; 0x27e <DIO_PortToggel+0x94>
		 		  break;
		 	 case EN_PORTC:
		 		  PORTC = ~PORTC;
 260:	a5 e3       	ldi	r26, 0x35	; 53
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e5 e3       	ldi	r30, 0x35	; 53
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	80 95       	com	r24
 26c:	8c 93       	st	X, r24
 26e:	07 c0       	rjmp	.+14     	; 0x27e <DIO_PortToggel+0x94>
		 		  break;
		 	 case EN_PORTD:
		 		  PORTD = ~PORTD;
 270:	a2 e3       	ldi	r26, 0x32	; 50
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e2 e3       	ldi	r30, 0x32	; 50
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 95       	com	r24
 27c:	8c 93       	st	X, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_PortToggel+0x9e>
	 }

	 else
	 {
		 local_Error_state = ES_OUT_OF_RANGE;
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 288:	89 81       	ldd	r24, Y+1	; 0x01
}
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <DIO_PortRead>:


ES_t DIO_PortRead(uint8 portID, uint8* PportVal)
{
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	00 d0       	rcall	.+0      	; 0x29e <DIO_PortRead+0x6>
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <DIO_PortRead+0x8>
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <DIO_PortRead+0xa>
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	8a 83       	std	Y+2, r24	; 0x02
 2a8:	7c 83       	std	Y+4, r23	; 0x04
 2aa:	6b 83       	std	Y+3, r22	; 0x03
	 ES_t local_Error_state = ES_NOK;
 2ac:	19 82       	std	Y+1, r1	; 0x01

	 if((PportVal != NULL) && (portID <= EN_PORTD))
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	9c 81       	ldd	r25, Y+4	; 0x04
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <DIO_PortRead+0x20>
 2b6:	40 c0       	rjmp	.+128    	; 0x338 <DIO_PortRead+0xa0>
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	e8 f5       	brcc	.+122    	; 0x338 <DIO_PortRead+0xa0>
	 {
		 switch(portID)
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	3e 83       	std	Y+6, r19	; 0x06
 2c6:	2d 83       	std	Y+5, r18	; 0x05
 2c8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ca:	9e 81       	ldd	r25, Y+6	; 0x06
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	91 05       	cpc	r25, r1
 2d0:	e1 f0       	breq	.+56     	; 0x30a <DIO_PortRead+0x72>
 2d2:	2d 81       	ldd	r18, Y+5	; 0x05
 2d4:	3e 81       	ldd	r19, Y+6	; 0x06
 2d6:	22 30       	cpi	r18, 0x02	; 2
 2d8:	31 05       	cpc	r19, r1
 2da:	2c f4       	brge	.+10     	; 0x2e6 <DIO_PortRead+0x4e>
 2dc:	8d 81       	ldd	r24, Y+5	; 0x05
 2de:	9e 81       	ldd	r25, Y+6	; 0x06
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	61 f0       	breq	.+24     	; 0x2fc <DIO_PortRead+0x64>
 2e4:	26 c0       	rjmp	.+76     	; 0x332 <DIO_PortRead+0x9a>
 2e6:	2d 81       	ldd	r18, Y+5	; 0x05
 2e8:	3e 81       	ldd	r19, Y+6	; 0x06
 2ea:	22 30       	cpi	r18, 0x02	; 2
 2ec:	31 05       	cpc	r19, r1
 2ee:	a1 f0       	breq	.+40     	; 0x318 <DIO_PortRead+0x80>
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	9e 81       	ldd	r25, Y+6	; 0x06
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	91 05       	cpc	r25, r1
 2f8:	b1 f0       	breq	.+44     	; 0x326 <DIO_PortRead+0x8e>
 2fa:	1b c0       	rjmp	.+54     	; 0x332 <DIO_PortRead+0x9a>
		 {
		 	 case EN_PORTA:
		 		*PportVal = PORTA;
 2fc:	eb e3       	ldi	r30, 0x3B	; 59
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	eb 81       	ldd	r30, Y+3	; 0x03
 304:	fc 81       	ldd	r31, Y+4	; 0x04
 306:	80 83       	st	Z, r24
 308:	14 c0       	rjmp	.+40     	; 0x332 <DIO_PortRead+0x9a>
		 		  break;
		 	 case EN_PORTB:
		 		*PportVal = PORTB;
 30a:	e8 e3       	ldi	r30, 0x38	; 56
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	eb 81       	ldd	r30, Y+3	; 0x03
 312:	fc 81       	ldd	r31, Y+4	; 0x04
 314:	80 83       	st	Z, r24
 316:	0d c0       	rjmp	.+26     	; 0x332 <DIO_PortRead+0x9a>
		 		  break;
		 	 case EN_PORTC:
		 		*PportVal = PORTC;
 318:	e5 e3       	ldi	r30, 0x35	; 53
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	eb 81       	ldd	r30, Y+3	; 0x03
 320:	fc 81       	ldd	r31, Y+4	; 0x04
 322:	80 83       	st	Z, r24
 324:	06 c0       	rjmp	.+12     	; 0x332 <DIO_PortRead+0x9a>
		 		  break;
		 	 case EN_PORTD:
		 		*PportVal = PORTD;
 326:	e2 e3       	ldi	r30, 0x32	; 50
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	eb 81       	ldd	r30, Y+3	; 0x03
 32e:	fc 81       	ldd	r31, Y+4	; 0x04
 330:	80 83       	st	Z, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	09 c0       	rjmp	.+18     	; 0x34a <DIO_PortRead+0xb2>
	 }

	 else
	 {
		 if(PportVal == NULL)
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	9c 81       	ldd	r25, Y+4	; 0x04
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	19 f4       	brne	.+6      	; 0x346 <DIO_PortRead+0xae>
			 local_Error_state = ES_NULL_PIONTER;
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_PortRead+0xb2>
		 else
			 local_Error_state = ES_OUT_OF_RANGE;
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 34a:	89 81       	ldd	r24, Y+1	; 0x01
}
 34c:	26 96       	adiw	r28, 0x06	; 6
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

0000035e <DIO_PinDir>:

/**************************************************************************************************/

ES_t DIO_PinDir(uint8 portID, uint8 pinID, uint8 pinVal)
{
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	00 d0       	rcall	.+0      	; 0x364 <DIO_PinDir+0x6>
 364:	00 d0       	rcall	.+0      	; 0x366 <DIO_PinDir+0x8>
 366:	00 d0       	rcall	.+0      	; 0x368 <DIO_PinDir+0xa>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	8a 83       	std	Y+2, r24	; 0x02
 36e:	6b 83       	std	Y+3, r22	; 0x03
 370:	4c 83       	std	Y+4, r20	; 0x04
	 ES_t local_Error_state = ES_NOK;
 372:	19 82       	std	Y+1, r1	; 0x01

	 if ((portID <= EN_PORTD) && (pinID <= PIN7))
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	84 30       	cpi	r24, 0x04	; 4
 378:	08 f0       	brcs	.+2      	; 0x37c <DIO_PinDir+0x1e>
 37a:	cd c0       	rjmp	.+410    	; 0x516 <DIO_PinDir+0x1b8>
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	88 30       	cpi	r24, 0x08	; 8
 380:	08 f0       	brcs	.+2      	; 0x384 <DIO_PinDir+0x26>
 382:	c9 c0       	rjmp	.+402    	; 0x516 <DIO_PinDir+0x1b8>
	 {
		 switch(portID)
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	3e 83       	std	Y+6, r19	; 0x06
 38c:	2d 83       	std	Y+5, r18	; 0x05
 38e:	6d 81       	ldd	r22, Y+5	; 0x05
 390:	7e 81       	ldd	r23, Y+6	; 0x06
 392:	61 30       	cpi	r22, 0x01	; 1
 394:	71 05       	cpc	r23, r1
 396:	09 f4       	brne	.+2      	; 0x39a <DIO_PinDir+0x3c>
 398:	41 c0       	rjmp	.+130    	; 0x41c <DIO_PinDir+0xbe>
 39a:	8d 81       	ldd	r24, Y+5	; 0x05
 39c:	9e 81       	ldd	r25, Y+6	; 0x06
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	91 05       	cpc	r25, r1
 3a2:	34 f4       	brge	.+12     	; 0x3b0 <DIO_PinDir+0x52>
 3a4:	2d 81       	ldd	r18, Y+5	; 0x05
 3a6:	3e 81       	ldd	r19, Y+6	; 0x06
 3a8:	21 15       	cp	r18, r1
 3aa:	31 05       	cpc	r19, r1
 3ac:	71 f0       	breq	.+28     	; 0x3ca <DIO_PinDir+0x6c>
 3ae:	b0 c0       	rjmp	.+352    	; 0x510 <DIO_PinDir+0x1b2>
 3b0:	6d 81       	ldd	r22, Y+5	; 0x05
 3b2:	7e 81       	ldd	r23, Y+6	; 0x06
 3b4:	62 30       	cpi	r22, 0x02	; 2
 3b6:	71 05       	cpc	r23, r1
 3b8:	09 f4       	brne	.+2      	; 0x3bc <DIO_PinDir+0x5e>
 3ba:	59 c0       	rjmp	.+178    	; 0x46e <DIO_PinDir+0x110>
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	9e 81       	ldd	r25, Y+6	; 0x06
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	91 05       	cpc	r25, r1
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <DIO_PinDir+0x6a>
 3c6:	7c c0       	rjmp	.+248    	; 0x4c0 <DIO_PinDir+0x162>
 3c8:	a3 c0       	rjmp	.+326    	; 0x510 <DIO_PinDir+0x1b2>
		 {
		 	 case EN_PORTA:
		 		  DDRA &= ~(MASK << pinID);
 3ca:	aa e3       	ldi	r26, 0x3A	; 58
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	ea e3       	ldi	r30, 0x3A	; 58
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	48 2f       	mov	r20, r24
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_PinDir+0x88>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	2a 95       	dec	r18
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_PinDir+0x84>
 3ea:	80 95       	com	r24
 3ec:	84 23       	and	r24, r20
 3ee:	8c 93       	st	X, r24
		 		  DDRA |= (pinVal << pinID);
 3f0:	aa e3       	ldi	r26, 0x3A	; 58
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	ea e3       	ldi	r30, 0x3A	; 58
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	88 2f       	mov	r24, r24
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_PinDir+0xb2>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_PinDir+0xae>
 414:	cb 01       	movw	r24, r22
 416:	84 2b       	or	r24, r20
 418:	8c 93       	st	X, r24
 41a:	7a c0       	rjmp	.+244    	; 0x510 <DIO_PinDir+0x1b2>
		 		  break;
		 	 case EN_PORTB:
		 		  DDRB &= ~(MASK << pinID);
 41c:	a7 e3       	ldi	r26, 0x37	; 55
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e7 e3       	ldi	r30, 0x37	; 55
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	48 2f       	mov	r20, r24
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_PinDir+0xda>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	2a 95       	dec	r18
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_PinDir+0xd6>
 43c:	80 95       	com	r24
 43e:	84 23       	and	r24, r20
 440:	8c 93       	st	X, r24
		 		  DDRB |= (pinVal << pinID);
 442:	a7 e3       	ldi	r26, 0x37	; 55
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e7 e3       	ldi	r30, 0x37	; 55
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	8b 81       	ldd	r24, Y+3	; 0x03
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_PinDir+0x104>
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_PinDir+0x100>
 466:	cb 01       	movw	r24, r22
 468:	84 2b       	or	r24, r20
 46a:	8c 93       	st	X, r24
 46c:	51 c0       	rjmp	.+162    	; 0x510 <DIO_PinDir+0x1b2>
		 		  break;
		 	 case EN_PORTC:
		 		  DDRC &= ~(MASK << pinID);
 46e:	a4 e3       	ldi	r26, 0x34	; 52
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	e4 e3       	ldi	r30, 0x34	; 52
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	48 2f       	mov	r20, r24
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	28 2f       	mov	r18, r24
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_PinDir+0x12c>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	2a 95       	dec	r18
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_PinDir+0x128>
 48e:	80 95       	com	r24
 490:	84 23       	and	r24, r20
 492:	8c 93       	st	X, r24
		 		  DDRC |= (pinVal << pinID);
 494:	a4 e3       	ldi	r26, 0x34	; 52
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e4 e3       	ldi	r30, 0x34	; 52
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	b9 01       	movw	r22, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_PinDir+0x156>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	8a 95       	dec	r24
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_PinDir+0x152>
 4b8:	cb 01       	movw	r24, r22
 4ba:	84 2b       	or	r24, r20
 4bc:	8c 93       	st	X, r24
 4be:	28 c0       	rjmp	.+80     	; 0x510 <DIO_PinDir+0x1b2>
		 		  break;
		 	 case EN_PORTD:
		 		  DDRD &= ~(MASK << pinID);
 4c0:	a1 e3       	ldi	r26, 0x31	; 49
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	e1 e3       	ldi	r30, 0x31	; 49
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	48 2f       	mov	r20, r24
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_PinDir+0x17e>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	2a 95       	dec	r18
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_PinDir+0x17a>
 4e0:	80 95       	com	r24
 4e2:	84 23       	and	r24, r20
 4e4:	8c 93       	st	X, r24
		 		  DDRD |= (pinVal << pinID);
 4e6:	a1 e3       	ldi	r26, 0x31	; 49
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e1 e3       	ldi	r30, 0x31	; 49
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8c 81       	ldd	r24, Y+4	; 0x04
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	88 2f       	mov	r24, r24
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	b9 01       	movw	r22, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_PinDir+0x1a8>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	8a 95       	dec	r24
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_PinDir+0x1a4>
 50a:	cb 01       	movw	r24, r22
 50c:	84 2b       	or	r24, r20
 50e:	8c 93       	st	X, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_PinDir+0x1bc>
	 }

	 else
	 {
		 local_Error_state = ES_OUT_OF_RANGE;
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 51a:	89 81       	ldd	r24, Y+1	; 0x01
}
 51c:	26 96       	adiw	r28, 0x06	; 6
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	de bf       	out	0x3e, r29	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	cd bf       	out	0x3d, r28	; 61
 528:	cf 91       	pop	r28
 52a:	df 91       	pop	r29
 52c:	08 95       	ret

0000052e <DIO_PinValue>:


ES_t DIO_PinValue(uint8 portID, uint8 pinID, uint8 pinVal)
{
 52e:	df 93       	push	r29
 530:	cf 93       	push	r28
 532:	00 d0       	rcall	.+0      	; 0x534 <DIO_PinValue+0x6>
 534:	00 d0       	rcall	.+0      	; 0x536 <DIO_PinValue+0x8>
 536:	00 d0       	rcall	.+0      	; 0x538 <DIO_PinValue+0xa>
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	8a 83       	std	Y+2, r24	; 0x02
 53e:	6b 83       	std	Y+3, r22	; 0x03
 540:	4c 83       	std	Y+4, r20	; 0x04
	 ES_t local_Error_state = ES_NOK;
 542:	19 82       	std	Y+1, r1	; 0x01

	 if ((portID <= EN_PORTD) && (pinID <= PIN7))
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	84 30       	cpi	r24, 0x04	; 4
 548:	08 f0       	brcs	.+2      	; 0x54c <DIO_PinValue+0x1e>
 54a:	cd c0       	rjmp	.+410    	; 0x6e6 <DIO_PinValue+0x1b8>
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	88 30       	cpi	r24, 0x08	; 8
 550:	08 f0       	brcs	.+2      	; 0x554 <DIO_PinValue+0x26>
 552:	c9 c0       	rjmp	.+402    	; 0x6e6 <DIO_PinValue+0x1b8>
	 {
		 switch(portID)
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	28 2f       	mov	r18, r24
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	3e 83       	std	Y+6, r19	; 0x06
 55c:	2d 83       	std	Y+5, r18	; 0x05
 55e:	6d 81       	ldd	r22, Y+5	; 0x05
 560:	7e 81       	ldd	r23, Y+6	; 0x06
 562:	61 30       	cpi	r22, 0x01	; 1
 564:	71 05       	cpc	r23, r1
 566:	09 f4       	brne	.+2      	; 0x56a <DIO_PinValue+0x3c>
 568:	41 c0       	rjmp	.+130    	; 0x5ec <DIO_PinValue+0xbe>
 56a:	8d 81       	ldd	r24, Y+5	; 0x05
 56c:	9e 81       	ldd	r25, Y+6	; 0x06
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	91 05       	cpc	r25, r1
 572:	34 f4       	brge	.+12     	; 0x580 <DIO_PinValue+0x52>
 574:	2d 81       	ldd	r18, Y+5	; 0x05
 576:	3e 81       	ldd	r19, Y+6	; 0x06
 578:	21 15       	cp	r18, r1
 57a:	31 05       	cpc	r19, r1
 57c:	71 f0       	breq	.+28     	; 0x59a <DIO_PinValue+0x6c>
 57e:	b0 c0       	rjmp	.+352    	; 0x6e0 <DIO_PinValue+0x1b2>
 580:	6d 81       	ldd	r22, Y+5	; 0x05
 582:	7e 81       	ldd	r23, Y+6	; 0x06
 584:	62 30       	cpi	r22, 0x02	; 2
 586:	71 05       	cpc	r23, r1
 588:	09 f4       	brne	.+2      	; 0x58c <DIO_PinValue+0x5e>
 58a:	59 c0       	rjmp	.+178    	; 0x63e <DIO_PinValue+0x110>
 58c:	8d 81       	ldd	r24, Y+5	; 0x05
 58e:	9e 81       	ldd	r25, Y+6	; 0x06
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	91 05       	cpc	r25, r1
 594:	09 f4       	brne	.+2      	; 0x598 <DIO_PinValue+0x6a>
 596:	7c c0       	rjmp	.+248    	; 0x690 <DIO_PinValue+0x162>
 598:	a3 c0       	rjmp	.+326    	; 0x6e0 <DIO_PinValue+0x1b2>
		 {
		 	 case EN_PORTA:
		 		  PORTA &= ~(MASK << pinID);
 59a:	ab e3       	ldi	r26, 0x3B	; 59
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	eb e3       	ldi	r30, 0x3B	; 59
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	48 2f       	mov	r20, r24
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	28 2f       	mov	r18, r24
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_PinValue+0x88>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	2a 95       	dec	r18
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_PinValue+0x84>
 5ba:	80 95       	com	r24
 5bc:	84 23       	and	r24, r20
 5be:	8c 93       	st	X, r24
		 		  PORTA |= (pinVal << pinID);
 5c0:	ab e3       	ldi	r26, 0x3B	; 59
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	eb e3       	ldi	r30, 0x3B	; 59
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	48 2f       	mov	r20, r24
 5cc:	8c 81       	ldd	r24, Y+4	; 0x04
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_PinValue+0xb2>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_PinValue+0xae>
 5e4:	cb 01       	movw	r24, r22
 5e6:	84 2b       	or	r24, r20
 5e8:	8c 93       	st	X, r24
 5ea:	7a c0       	rjmp	.+244    	; 0x6e0 <DIO_PinValue+0x1b2>
		 		  break;
		 	 case EN_PORTB:
		 		  PORTB &= ~(MASK << pinID);
 5ec:	a8 e3       	ldi	r26, 0x38	; 56
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	e8 e3       	ldi	r30, 0x38	; 56
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	48 2f       	mov	r20, r24
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_PinValue+0xda>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	2a 95       	dec	r18
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_PinValue+0xd6>
 60c:	80 95       	com	r24
 60e:	84 23       	and	r24, r20
 610:	8c 93       	st	X, r24
		 		  PORTB |= (pinVal << pinID);
 612:	a8 e3       	ldi	r26, 0x38	; 56
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e8 e3       	ldi	r30, 0x38	; 56
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	48 2f       	mov	r20, r24
 61e:	8c 81       	ldd	r24, Y+4	; 0x04
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	8b 81       	ldd	r24, Y+3	; 0x03
 626:	88 2f       	mov	r24, r24
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	b9 01       	movw	r22, r18
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_PinValue+0x104>
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	8a 95       	dec	r24
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_PinValue+0x100>
 636:	cb 01       	movw	r24, r22
 638:	84 2b       	or	r24, r20
 63a:	8c 93       	st	X, r24
 63c:	51 c0       	rjmp	.+162    	; 0x6e0 <DIO_PinValue+0x1b2>
		 		  break;
		 	 case EN_PORTC:
		 		  PORTC &= ~(MASK << pinID);
 63e:	a5 e3       	ldi	r26, 0x35	; 53
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e5 e3       	ldi	r30, 0x35	; 53
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	48 2f       	mov	r20, r24
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_PinValue+0x12c>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	2a 95       	dec	r18
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_PinValue+0x128>
 65e:	80 95       	com	r24
 660:	84 23       	and	r24, r20
 662:	8c 93       	st	X, r24
		 		  PORTC |= (pinVal << pinID);
 664:	a5 e3       	ldi	r26, 0x35	; 53
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	e5 e3       	ldi	r30, 0x35	; 53
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	48 2f       	mov	r20, r24
 670:	8c 81       	ldd	r24, Y+4	; 0x04
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	88 2f       	mov	r24, r24
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	b9 01       	movw	r22, r18
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_PinValue+0x156>
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	8a 95       	dec	r24
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_PinValue+0x152>
 688:	cb 01       	movw	r24, r22
 68a:	84 2b       	or	r24, r20
 68c:	8c 93       	st	X, r24
 68e:	28 c0       	rjmp	.+80     	; 0x6e0 <DIO_PinValue+0x1b2>
		 		  break;
		 	 case EN_PORTD:
		 		  PORTD &= ~(MASK << pinID);
 690:	a2 e3       	ldi	r26, 0x32	; 50
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e2 e3       	ldi	r30, 0x32	; 50
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	48 2f       	mov	r20, r24
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	28 2f       	mov	r18, r24
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_PinValue+0x17e>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	2a 95       	dec	r18
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_PinValue+0x17a>
 6b0:	80 95       	com	r24
 6b2:	84 23       	and	r24, r20
 6b4:	8c 93       	st	X, r24
		 		  PORTD |= (pinVal << pinID);
 6b6:	a2 e3       	ldi	r26, 0x32	; 50
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	e2 e3       	ldi	r30, 0x32	; 50
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	48 2f       	mov	r20, r24
 6c2:	8c 81       	ldd	r24, Y+4	; 0x04
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	b9 01       	movw	r22, r18
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_PinValue+0x1a8>
 6d2:	66 0f       	add	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	8a 95       	dec	r24
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_PinValue+0x1a4>
 6da:	cb 01       	movw	r24, r22
 6dc:	84 2b       	or	r24, r20
 6de:	8c 93       	st	X, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_PinValue+0x1bc>
	 }

	 else
	 {
		 local_Error_state = ES_OUT_OF_RANGE;
 6e6:	83 e0       	ldi	r24, 0x03	; 3
 6e8:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ec:	26 96       	adiw	r28, 0x06	; 6
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	cf 91       	pop	r28
 6fa:	df 91       	pop	r29
 6fc:	08 95       	ret

000006fe <DIO_PinToggel>:


ES_t DIO_PinToggel(uint8 portID, uint8 pinID)
{
 6fe:	df 93       	push	r29
 700:	cf 93       	push	r28
 702:	00 d0       	rcall	.+0      	; 0x704 <DIO_PinToggel+0x6>
 704:	00 d0       	rcall	.+0      	; 0x706 <DIO_PinToggel+0x8>
 706:	0f 92       	push	r0
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	8a 83       	std	Y+2, r24	; 0x02
 70e:	6b 83       	std	Y+3, r22	; 0x03
	 ES_t local_Error_state = ES_NOK;
 710:	19 82       	std	Y+1, r1	; 0x01

	 if ((portID <= EN_PORTD) && (pinID <= PIN7))
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	84 30       	cpi	r24, 0x04	; 4
 716:	08 f0       	brcs	.+2      	; 0x71a <DIO_PinToggel+0x1c>
 718:	75 c0       	rjmp	.+234    	; 0x804 <DIO_PinToggel+0x106>
 71a:	8b 81       	ldd	r24, Y+3	; 0x03
 71c:	88 30       	cpi	r24, 0x08	; 8
 71e:	08 f0       	brcs	.+2      	; 0x722 <DIO_PinToggel+0x24>
 720:	71 c0       	rjmp	.+226    	; 0x804 <DIO_PinToggel+0x106>
	 {
		 switch(portID)
 722:	8a 81       	ldd	r24, Y+2	; 0x02
 724:	28 2f       	mov	r18, r24
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	3d 83       	std	Y+5, r19	; 0x05
 72a:	2c 83       	std	Y+4, r18	; 0x04
 72c:	8c 81       	ldd	r24, Y+4	; 0x04
 72e:	9d 81       	ldd	r25, Y+5	; 0x05
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	91 05       	cpc	r25, r1
 734:	49 f1       	breq	.+82     	; 0x788 <DIO_PinToggel+0x8a>
 736:	2c 81       	ldd	r18, Y+4	; 0x04
 738:	3d 81       	ldd	r19, Y+5	; 0x05
 73a:	22 30       	cpi	r18, 0x02	; 2
 73c:	31 05       	cpc	r19, r1
 73e:	2c f4       	brge	.+10     	; 0x74a <DIO_PinToggel+0x4c>
 740:	8c 81       	ldd	r24, Y+4	; 0x04
 742:	9d 81       	ldd	r25, Y+5	; 0x05
 744:	00 97       	sbiw	r24, 0x00	; 0
 746:	61 f0       	breq	.+24     	; 0x760 <DIO_PinToggel+0x62>
 748:	5a c0       	rjmp	.+180    	; 0x7fe <DIO_PinToggel+0x100>
 74a:	2c 81       	ldd	r18, Y+4	; 0x04
 74c:	3d 81       	ldd	r19, Y+5	; 0x05
 74e:	22 30       	cpi	r18, 0x02	; 2
 750:	31 05       	cpc	r19, r1
 752:	71 f1       	breq	.+92     	; 0x7b0 <DIO_PinToggel+0xb2>
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	83 30       	cpi	r24, 0x03	; 3
 75a:	91 05       	cpc	r25, r1
 75c:	e9 f1       	breq	.+122    	; 0x7d8 <DIO_PinToggel+0xda>
 75e:	4f c0       	rjmp	.+158    	; 0x7fe <DIO_PinToggel+0x100>
		 {
		 	 case EN_PORTA:
		 		  PORTA ^= (MASK << pinID);
 760:	ab e3       	ldi	r26, 0x3B	; 59
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	eb e3       	ldi	r30, 0x3B	; 59
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	48 2f       	mov	r20, r24
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	28 2f       	mov	r18, r24
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	02 2e       	mov	r0, r18
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_PinToggel+0x80>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	0a 94       	dec	r0
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_PinToggel+0x7c>
 782:	84 27       	eor	r24, r20
 784:	8c 93       	st	X, r24
 786:	3b c0       	rjmp	.+118    	; 0x7fe <DIO_PinToggel+0x100>
		 		  break;
		 	 case EN_PORTB:
		 		  PORTB ^= (MASK << pinID);
 788:	a8 e3       	ldi	r26, 0x38	; 56
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	e8 e3       	ldi	r30, 0x38	; 56
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	48 2f       	mov	r20, r24
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	28 2f       	mov	r18, r24
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 2e       	mov	r0, r18
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_PinToggel+0xa8>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_PinToggel+0xa4>
 7aa:	84 27       	eor	r24, r20
 7ac:	8c 93       	st	X, r24
 7ae:	27 c0       	rjmp	.+78     	; 0x7fe <DIO_PinToggel+0x100>
		 		  break;
		 	 case EN_PORTC:
		 		  PORTC ^= (MASK << pinID);
 7b0:	a5 e3       	ldi	r26, 0x35	; 53
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	e5 e3       	ldi	r30, 0x35	; 53
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	48 2f       	mov	r20, r24
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	28 2f       	mov	r18, r24
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 2e       	mov	r0, r18
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_PinToggel+0xd0>
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	0a 94       	dec	r0
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_PinToggel+0xcc>
 7d2:	84 27       	eor	r24, r20
 7d4:	8c 93       	st	X, r24
 7d6:	13 c0       	rjmp	.+38     	; 0x7fe <DIO_PinToggel+0x100>
		 		  break;
		 	 case EN_PORTD:
		 		  PORTD ^= (MASK << pinID);
 7d8:	a2 e3       	ldi	r26, 0x32	; 50
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	e2 e3       	ldi	r30, 0x32	; 50
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	48 2f       	mov	r20, r24
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	28 2f       	mov	r18, r24
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 2e       	mov	r0, r18
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_PinToggel+0xf8>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	0a 94       	dec	r0
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_PinToggel+0xf4>
 7fa:	84 27       	eor	r24, r20
 7fc:	8c 93       	st	X, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_PinToggel+0x10a>
	 }

	 else
	 {
		 local_Error_state = ES_OUT_OF_RANGE;
 804:	83 e0       	ldi	r24, 0x03	; 3
 806:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 808:	89 81       	ldd	r24, Y+1	; 0x01
}
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	cf 91       	pop	r28
 816:	df 91       	pop	r29
 818:	08 95       	ret

0000081a <DIO_PinRead>:


ES_t DIO_PinRead(uint8 portID, uint8 pinID, uint8* PpinVal)
{
 81a:	df 93       	push	r29
 81c:	cf 93       	push	r28
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
 822:	27 97       	sbiw	r28, 0x07	; 7
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	f8 94       	cli
 828:	de bf       	out	0x3e, r29	; 62
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	cd bf       	out	0x3d, r28	; 61
 82e:	8a 83       	std	Y+2, r24	; 0x02
 830:	6b 83       	std	Y+3, r22	; 0x03
 832:	5d 83       	std	Y+5, r21	; 0x05
 834:	4c 83       	std	Y+4, r20	; 0x04
	 ES_t local_Error_state = ES_NOK;
 836:	19 82       	std	Y+1, r1	; 0x01

	 if((PpinVal != NULL) && (portID <= EN_PORTD))
 838:	8c 81       	ldd	r24, Y+4	; 0x04
 83a:	9d 81       	ldd	r25, Y+5	; 0x05
 83c:	00 97       	sbiw	r24, 0x00	; 0
 83e:	09 f4       	brne	.+2      	; 0x842 <DIO_PinRead+0x28>
 840:	77 c0       	rjmp	.+238    	; 0x930 <__stack+0xd1>
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	84 30       	cpi	r24, 0x04	; 4
 846:	08 f0       	brcs	.+2      	; 0x84a <DIO_PinRead+0x30>
 848:	73 c0       	rjmp	.+230    	; 0x930 <__stack+0xd1>
	 {
		 switch(portID)
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	28 2f       	mov	r18, r24
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	3f 83       	std	Y+7, r19	; 0x07
 852:	2e 83       	std	Y+6, r18	; 0x06
 854:	4e 81       	ldd	r20, Y+6	; 0x06
 856:	5f 81       	ldd	r21, Y+7	; 0x07
 858:	41 30       	cpi	r20, 0x01	; 1
 85a:	51 05       	cpc	r21, r1
 85c:	59 f1       	breq	.+86     	; 0x8b4 <__stack+0x55>
 85e:	8e 81       	ldd	r24, Y+6	; 0x06
 860:	9f 81       	ldd	r25, Y+7	; 0x07
 862:	82 30       	cpi	r24, 0x02	; 2
 864:	91 05       	cpc	r25, r1
 866:	34 f4       	brge	.+12     	; 0x874 <__stack+0x15>
 868:	2e 81       	ldd	r18, Y+6	; 0x06
 86a:	3f 81       	ldd	r19, Y+7	; 0x07
 86c:	21 15       	cp	r18, r1
 86e:	31 05       	cpc	r19, r1
 870:	69 f0       	breq	.+26     	; 0x88c <__stack+0x2d>
 872:	5b c0       	rjmp	.+182    	; 0x92a <__stack+0xcb>
 874:	4e 81       	ldd	r20, Y+6	; 0x06
 876:	5f 81       	ldd	r21, Y+7	; 0x07
 878:	42 30       	cpi	r20, 0x02	; 2
 87a:	51 05       	cpc	r21, r1
 87c:	79 f1       	breq	.+94     	; 0x8dc <__stack+0x7d>
 87e:	8e 81       	ldd	r24, Y+6	; 0x06
 880:	9f 81       	ldd	r25, Y+7	; 0x07
 882:	83 30       	cpi	r24, 0x03	; 3
 884:	91 05       	cpc	r25, r1
 886:	09 f4       	brne	.+2      	; 0x88a <__stack+0x2b>
 888:	3d c0       	rjmp	.+122    	; 0x904 <__stack+0xa5>
 88a:	4f c0       	rjmp	.+158    	; 0x92a <__stack+0xcb>
		 {
		 	 case EN_PORTA:
		 		*PpinVal = ((PORTA >> pinID) & MASK);
 88c:	eb e3       	ldi	r30, 0x3B	; 59
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	28 2f       	mov	r18, r24
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	8b 81       	ldd	r24, Y+3	; 0x03
 898:	88 2f       	mov	r24, r24
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	a9 01       	movw	r20, r18
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	55 95       	asr	r21
 8a2:	47 95       	ror	r20
 8a4:	8a 95       	dec	r24
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	ca 01       	movw	r24, r20
 8aa:	81 70       	andi	r24, 0x01	; 1
 8ac:	ec 81       	ldd	r30, Y+4	; 0x04
 8ae:	fd 81       	ldd	r31, Y+5	; 0x05
 8b0:	80 83       	st	Z, r24
 8b2:	3b c0       	rjmp	.+118    	; 0x92a <__stack+0xcb>
		 		  break;
		 	 case EN_PORTB:
		 		*PpinVal = ((PORTB >> pinID) & MASK);
 8b4:	e8 e3       	ldi	r30, 0x38	; 56
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	80 81       	ld	r24, Z
 8ba:	28 2f       	mov	r18, r24
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	8b 81       	ldd	r24, Y+3	; 0x03
 8c0:	88 2f       	mov	r24, r24
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	a9 01       	movw	r20, r18
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	55 95       	asr	r21
 8ca:	47 95       	ror	r20
 8cc:	8a 95       	dec	r24
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	ca 01       	movw	r24, r20
 8d2:	81 70       	andi	r24, 0x01	; 1
 8d4:	ec 81       	ldd	r30, Y+4	; 0x04
 8d6:	fd 81       	ldd	r31, Y+5	; 0x05
 8d8:	80 83       	st	Z, r24
 8da:	27 c0       	rjmp	.+78     	; 0x92a <__stack+0xcb>
		 		  break;
		 	 case EN_PORTC:
		 		*PpinVal = ((PORTC >> pinID) & MASK);
 8dc:	e5 e3       	ldi	r30, 0x35	; 53
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	28 2f       	mov	r18, r24
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	8b 81       	ldd	r24, Y+3	; 0x03
 8e8:	88 2f       	mov	r24, r24
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__stack+0x95>
 8f0:	55 95       	asr	r21
 8f2:	47 95       	ror	r20
 8f4:	8a 95       	dec	r24
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <__stack+0x91>
 8f8:	ca 01       	movw	r24, r20
 8fa:	81 70       	andi	r24, 0x01	; 1
 8fc:	ec 81       	ldd	r30, Y+4	; 0x04
 8fe:	fd 81       	ldd	r31, Y+5	; 0x05
 900:	80 83       	st	Z, r24
 902:	13 c0       	rjmp	.+38     	; 0x92a <__stack+0xcb>
		 		  break;
		 	 case EN_PORTD:
		 		*PpinVal = ((PORTD >> pinID) & MASK);
 904:	e2 e3       	ldi	r30, 0x32	; 50
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	28 2f       	mov	r18, r24
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	88 2f       	mov	r24, r24
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	a9 01       	movw	r20, r18
 916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0xbd>
 918:	55 95       	asr	r21
 91a:	47 95       	ror	r20
 91c:	8a 95       	dec	r24
 91e:	e2 f7       	brpl	.-8      	; 0x918 <__stack+0xb9>
 920:	ca 01       	movw	r24, r20
 922:	81 70       	andi	r24, 0x01	; 1
 924:	ec 81       	ldd	r30, Y+4	; 0x04
 926:	fd 81       	ldd	r31, Y+5	; 0x05
 928:	80 83       	st	Z, r24
		 		  break;
		 }
		 local_Error_state = ES_OK;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	89 83       	std	Y+1, r24	; 0x01
 92e:	09 c0       	rjmp	.+18     	; 0x942 <__stack+0xe3>
	 }

	 else
	 {
		 if(PpinVal == NULL)
 930:	8c 81       	ldd	r24, Y+4	; 0x04
 932:	9d 81       	ldd	r25, Y+5	; 0x05
 934:	00 97       	sbiw	r24, 0x00	; 0
 936:	19 f4       	brne	.+6      	; 0x93e <__stack+0xdf>
			 local_Error_state = ES_NULL_PIONTER;
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	89 83       	std	Y+1, r24	; 0x01
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0xe3>
		 else
			 local_Error_state = ES_OUT_OF_RANGE;
 93e:	83 e0       	ldi	r24, 0x03	; 3
 940:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return local_Error_state;
 942:	89 81       	ldd	r24, Y+1	; 0x01
}
 944:	27 96       	adiw	r28, 0x07	; 7
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	f8 94       	cli
 94a:	de bf       	out	0x3e, r29	; 62
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	cd bf       	out	0x3d, r28	; 61
 950:	cf 91       	pop	r28
 952:	df 91       	pop	r29
 954:	08 95       	ret

00000956 <LEDinit>:

#include "DIO_inter.h"


ES_t LEDinit(LED_t* Copy_pstrLedConfig)
{
 956:	df 93       	push	r29
 958:	cf 93       	push	r28
 95a:	00 d0       	rcall	.+0      	; 0x95c <LEDinit+0x6>
 95c:	00 d0       	rcall	.+0      	; 0x95e <LEDinit+0x8>
 95e:	0f 92       	push	r0
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
 964:	9c 83       	std	Y+4, r25	; 0x04
 966:	8b 83       	std	Y+3, r24	; 0x03
	ES_t local_Error_state = ES_NOK;
 968:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrLedConfig != NULL)
 96a:	8b 81       	ldd	r24, Y+3	; 0x03
 96c:	9c 81       	ldd	r25, Y+4	; 0x04
 96e:	00 97       	sbiw	r24, 0x00	; 0
 970:	09 f4       	brne	.+2      	; 0x974 <LEDinit+0x1e>
 972:	a7 c0       	rjmp	.+334    	; 0xac2 <LEDinit+0x16c>
	{
		uint8 Local_counter = 0;
 974:	19 82       	std	Y+1, r1	; 0x01
		for(Local_counter = 0; Local_counter < LED_NUM; Local_counter++)
 976:	19 82       	std	Y+1, r1	; 0x01
 978:	9f c0       	rjmp	.+318    	; 0xab8 <LEDinit+0x162>
		{
			local_Error_state = DIO_PinDir(Copy_pstrLedConfig[Local_counter].LED_PortID, Copy_pstrLedConfig[Local_counter].LED_PinID, OUTPUT);
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	88 2f       	mov	r24, r24
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	9c 01       	movw	r18, r24
 982:	22 0f       	add	r18, r18
 984:	33 1f       	adc	r19, r19
 986:	22 0f       	add	r18, r18
 988:	33 1f       	adc	r19, r19
 98a:	8b 81       	ldd	r24, Y+3	; 0x03
 98c:	9c 81       	ldd	r25, Y+4	; 0x04
 98e:	fc 01       	movw	r30, r24
 990:	e2 0f       	add	r30, r18
 992:	f3 1f       	adc	r31, r19
 994:	40 81       	ld	r20, Z
 996:	89 81       	ldd	r24, Y+1	; 0x01
 998:	88 2f       	mov	r24, r24
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	9c 01       	movw	r18, r24
 99e:	22 0f       	add	r18, r18
 9a0:	33 1f       	adc	r19, r19
 9a2:	22 0f       	add	r18, r18
 9a4:	33 1f       	adc	r19, r19
 9a6:	8b 81       	ldd	r24, Y+3	; 0x03
 9a8:	9c 81       	ldd	r25, Y+4	; 0x04
 9aa:	fc 01       	movw	r30, r24
 9ac:	e2 0f       	add	r30, r18
 9ae:	f3 1f       	adc	r31, r19
 9b0:	91 81       	ldd	r25, Z+1	; 0x01
 9b2:	84 2f       	mov	r24, r20
 9b4:	69 2f       	mov	r22, r25
 9b6:	41 e0       	ldi	r20, 0x01	; 1
 9b8:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_PinDir>
 9bc:	8a 83       	std	Y+2, r24	; 0x02
			if(Copy_pstrLedConfig[Local_counter].LED_Connection == LED_SINK)
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	88 2f       	mov	r24, r24
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	9c 01       	movw	r18, r24
 9c6:	22 0f       	add	r18, r18
 9c8:	33 1f       	adc	r19, r19
 9ca:	22 0f       	add	r18, r18
 9cc:	33 1f       	adc	r19, r19
 9ce:	8b 81       	ldd	r24, Y+3	; 0x03
 9d0:	9c 81       	ldd	r25, Y+4	; 0x04
 9d2:	fc 01       	movw	r30, r24
 9d4:	e2 0f       	add	r30, r18
 9d6:	f3 1f       	adc	r31, r19
 9d8:	82 81       	ldd	r24, Z+2	; 0x02
 9da:	88 23       	and	r24, r24
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <LEDinit+0x8a>
 9de:	69 c0       	rjmp	.+210    	; 0xab2 <LEDinit+0x15c>
			{
				if(Copy_pstrLedConfig[Local_counter].LED_InitState == LED_ON)
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	88 2f       	mov	r24, r24
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	9c 01       	movw	r18, r24
 9e8:	22 0f       	add	r18, r18
 9ea:	33 1f       	adc	r19, r19
 9ec:	22 0f       	add	r18, r18
 9ee:	33 1f       	adc	r19, r19
 9f0:	8b 81       	ldd	r24, Y+3	; 0x03
 9f2:	9c 81       	ldd	r25, Y+4	; 0x04
 9f4:	fc 01       	movw	r30, r24
 9f6:	e2 0f       	add	r30, r18
 9f8:	f3 1f       	adc	r31, r19
 9fa:	83 81       	ldd	r24, Z+3	; 0x03
 9fc:	81 30       	cpi	r24, 0x01	; 1
 9fe:	19 f5       	brne	.+70     	; 0xa46 <LEDinit+0xf0>
				{
					local_Error_state = DIO_PinValue(Copy_pstrLedConfig[Local_counter].LED_PortID, Copy_pstrLedConfig[Local_counter].LED_PinID, LOW);
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	88 2f       	mov	r24, r24
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	9c 01       	movw	r18, r24
 a08:	22 0f       	add	r18, r18
 a0a:	33 1f       	adc	r19, r19
 a0c:	22 0f       	add	r18, r18
 a0e:	33 1f       	adc	r19, r19
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	9c 81       	ldd	r25, Y+4	; 0x04
 a14:	fc 01       	movw	r30, r24
 a16:	e2 0f       	add	r30, r18
 a18:	f3 1f       	adc	r31, r19
 a1a:	40 81       	ld	r20, Z
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	88 2f       	mov	r24, r24
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	9c 01       	movw	r18, r24
 a24:	22 0f       	add	r18, r18
 a26:	33 1f       	adc	r19, r19
 a28:	22 0f       	add	r18, r18
 a2a:	33 1f       	adc	r19, r19
 a2c:	8b 81       	ldd	r24, Y+3	; 0x03
 a2e:	9c 81       	ldd	r25, Y+4	; 0x04
 a30:	fc 01       	movw	r30, r24
 a32:	e2 0f       	add	r30, r18
 a34:	f3 1f       	adc	r31, r19
 a36:	91 81       	ldd	r25, Z+1	; 0x01
 a38:	84 2f       	mov	r24, r20
 a3a:	69 2f       	mov	r22, r25
 a3c:	40 e0       	ldi	r20, 0x00	; 0
 a3e:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 a42:	8a 83       	std	Y+2, r24	; 0x02
 a44:	36 c0       	rjmp	.+108    	; 0xab2 <LEDinit+0x15c>
				}
				else if(Copy_pstrLedConfig[Local_counter].LED_InitState == LED_OFF)
 a46:	89 81       	ldd	r24, Y+1	; 0x01
 a48:	88 2f       	mov	r24, r24
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	9c 01       	movw	r18, r24
 a4e:	22 0f       	add	r18, r18
 a50:	33 1f       	adc	r19, r19
 a52:	22 0f       	add	r18, r18
 a54:	33 1f       	adc	r19, r19
 a56:	8b 81       	ldd	r24, Y+3	; 0x03
 a58:	9c 81       	ldd	r25, Y+4	; 0x04
 a5a:	fc 01       	movw	r30, r24
 a5c:	e2 0f       	add	r30, r18
 a5e:	f3 1f       	adc	r31, r19
 a60:	83 81       	ldd	r24, Z+3	; 0x03
 a62:	88 23       	and	r24, r24
 a64:	19 f5       	brne	.+70     	; 0xaac <LEDinit+0x156>
				{
					local_Error_state = DIO_PinValue(Copy_pstrLedConfig[Local_counter].LED_PortID, Copy_pstrLedConfig[Local_counter].LED_PinID, HIGH);
 a66:	89 81       	ldd	r24, Y+1	; 0x01
 a68:	88 2f       	mov	r24, r24
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	9c 01       	movw	r18, r24
 a6e:	22 0f       	add	r18, r18
 a70:	33 1f       	adc	r19, r19
 a72:	22 0f       	add	r18, r18
 a74:	33 1f       	adc	r19, r19
 a76:	8b 81       	ldd	r24, Y+3	; 0x03
 a78:	9c 81       	ldd	r25, Y+4	; 0x04
 a7a:	fc 01       	movw	r30, r24
 a7c:	e2 0f       	add	r30, r18
 a7e:	f3 1f       	adc	r31, r19
 a80:	40 81       	ld	r20, Z
 a82:	89 81       	ldd	r24, Y+1	; 0x01
 a84:	88 2f       	mov	r24, r24
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	9c 01       	movw	r18, r24
 a8a:	22 0f       	add	r18, r18
 a8c:	33 1f       	adc	r19, r19
 a8e:	22 0f       	add	r18, r18
 a90:	33 1f       	adc	r19, r19
 a92:	8b 81       	ldd	r24, Y+3	; 0x03
 a94:	9c 81       	ldd	r25, Y+4	; 0x04
 a96:	fc 01       	movw	r30, r24
 a98:	e2 0f       	add	r30, r18
 a9a:	f3 1f       	adc	r31, r19
 a9c:	91 81       	ldd	r25, Z+1	; 0x01
 a9e:	84 2f       	mov	r24, r20
 aa0:	69 2f       	mov	r22, r25
 aa2:	41 e0       	ldi	r20, 0x01	; 1
 aa4:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 aa8:	8a 83       	std	Y+2, r24	; 0x02
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <LEDinit+0x15c>
				}
				else
				{
					return ES_OUT_OF_RANGE;
 aac:	83 e0       	ldi	r24, 0x03	; 3
 aae:	8d 83       	std	Y+5, r24	; 0x05
 ab0:	0c c0       	rjmp	.+24     	; 0xaca <LEDinit+0x174>
	ES_t local_Error_state = ES_NOK;

	if(Copy_pstrLedConfig != NULL)
	{
		uint8 Local_counter = 0;
		for(Local_counter = 0; Local_counter < LED_NUM; Local_counter++)
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	8f 5f       	subi	r24, 0xFF	; 255
 ab6:	89 83       	std	Y+1, r24	; 0x01
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	83 30       	cpi	r24, 0x03	; 3
 abc:	08 f4       	brcc	.+2      	; 0xac0 <LEDinit+0x16a>
 abe:	5d cf       	rjmp	.-326    	; 0x97a <LEDinit+0x24>
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <LEDinit+0x170>
			}
		}
	}
	else
	{
		local_Error_state = ES_NULL_PIONTER;
 ac2:	82 e0       	ldi	r24, 0x02	; 2
 ac4:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_Error_state;
 ac6:	8a 81       	ldd	r24, Y+2	; 0x02
 ac8:	8d 83       	std	Y+5, r24	; 0x05
 aca:	8d 81       	ldd	r24, Y+5	; 0x05
}
 acc:	0f 90       	pop	r0
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	0f 90       	pop	r0
 ad4:	0f 90       	pop	r0
 ad6:	cf 91       	pop	r28
 ad8:	df 91       	pop	r29
 ada:	08 95       	ret

00000adc <LEDON>:

ES_t LEDON(LED_t* Copy_pstrLedID)
{
 adc:	df 93       	push	r29
 ade:	cf 93       	push	r28
 ae0:	00 d0       	rcall	.+0      	; 0xae2 <LEDON+0x6>
 ae2:	0f 92       	push	r0
 ae4:	cd b7       	in	r28, 0x3d	; 61
 ae6:	de b7       	in	r29, 0x3e	; 62
 ae8:	9b 83       	std	Y+3, r25	; 0x03
 aea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_Error_state = ES_NOK;
 aec:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedID != NULL)
 aee:	8a 81       	ldd	r24, Y+2	; 0x02
 af0:	9b 81       	ldd	r25, Y+3	; 0x03
 af2:	00 97       	sbiw	r24, 0x00	; 0
 af4:	29 f1       	breq	.+74     	; 0xb40 <LEDON+0x64>
	{
		if (Copy_pstrLedID->LED_Connection == LED_SINK)
 af6:	ea 81       	ldd	r30, Y+2	; 0x02
 af8:	fb 81       	ldd	r31, Y+3	; 0x03
 afa:	82 81       	ldd	r24, Z+2	; 0x02
 afc:	88 23       	and	r24, r24
 afe:	61 f4       	brne	.+24     	; 0xb18 <LEDON+0x3c>
		{
			local_Error_state = DIO_PinValue(Copy_pstrLedID->LED_PortID, Copy_pstrLedID->LED_PinID, LOW);
 b00:	ea 81       	ldd	r30, Y+2	; 0x02
 b02:	fb 81       	ldd	r31, Y+3	; 0x03
 b04:	80 81       	ld	r24, Z
 b06:	ea 81       	ldd	r30, Y+2	; 0x02
 b08:	fb 81       	ldd	r31, Y+3	; 0x03
 b0a:	91 81       	ldd	r25, Z+1	; 0x01
 b0c:	69 2f       	mov	r22, r25
 b0e:	40 e0       	ldi	r20, 0x00	; 0
 b10:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 b14:	89 83       	std	Y+1, r24	; 0x01
 b16:	16 c0       	rjmp	.+44     	; 0xb44 <LEDON+0x68>
		}
		else if(Copy_pstrLedID->LED_Connection == LED_SOURCE)
 b18:	ea 81       	ldd	r30, Y+2	; 0x02
 b1a:	fb 81       	ldd	r31, Y+3	; 0x03
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	81 30       	cpi	r24, 0x01	; 1
 b20:	61 f4       	brne	.+24     	; 0xb3a <LEDON+0x5e>
		{
			local_Error_state = DIO_PinValue(Copy_pstrLedID->LED_PortID, Copy_pstrLedID->LED_PinID, HIGH);
 b22:	ea 81       	ldd	r30, Y+2	; 0x02
 b24:	fb 81       	ldd	r31, Y+3	; 0x03
 b26:	80 81       	ld	r24, Z
 b28:	ea 81       	ldd	r30, Y+2	; 0x02
 b2a:	fb 81       	ldd	r31, Y+3	; 0x03
 b2c:	91 81       	ldd	r25, Z+1	; 0x01
 b2e:	69 2f       	mov	r22, r25
 b30:	41 e0       	ldi	r20, 0x01	; 1
 b32:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 b36:	89 83       	std	Y+1, r24	; 0x01
 b38:	05 c0       	rjmp	.+10     	; 0xb44 <LEDON+0x68>
		}
		else
		{
			local_Error_state = ES_OUT_OF_RANGE;
 b3a:	83 e0       	ldi	r24, 0x03	; 3
 b3c:	89 83       	std	Y+1, r24	; 0x01
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <LEDON+0x68>
		}
	}
	else
	{
		local_Error_state = ES_NULL_PIONTER;
 b40:	82 e0       	ldi	r24, 0x02	; 2
 b42:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_Error_state;
 b44:	89 81       	ldd	r24, Y+1	; 0x01
}
 b46:	0f 90       	pop	r0
 b48:	0f 90       	pop	r0
 b4a:	0f 90       	pop	r0
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	08 95       	ret

00000b52 <LEDOFF>:

ES_t LEDOFF(LED_t* Copy_pstrLedID)
{
 b52:	df 93       	push	r29
 b54:	cf 93       	push	r28
 b56:	00 d0       	rcall	.+0      	; 0xb58 <LEDOFF+0x6>
 b58:	0f 92       	push	r0
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
 b5e:	9b 83       	std	Y+3, r25	; 0x03
 b60:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_Error_state = ES_NOK;
 b62:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedID != NULL)
 b64:	8a 81       	ldd	r24, Y+2	; 0x02
 b66:	9b 81       	ldd	r25, Y+3	; 0x03
 b68:	00 97       	sbiw	r24, 0x00	; 0
 b6a:	29 f1       	breq	.+74     	; 0xbb6 <LEDOFF+0x64>
	{
		if (Copy_pstrLedID->LED_Connection == LED_SINK)
 b6c:	ea 81       	ldd	r30, Y+2	; 0x02
 b6e:	fb 81       	ldd	r31, Y+3	; 0x03
 b70:	82 81       	ldd	r24, Z+2	; 0x02
 b72:	88 23       	and	r24, r24
 b74:	61 f4       	brne	.+24     	; 0xb8e <LEDOFF+0x3c>
		{
			local_Error_state = DIO_PinValue(Copy_pstrLedID->LED_PortID, Copy_pstrLedID->LED_PinID, LOW);
 b76:	ea 81       	ldd	r30, Y+2	; 0x02
 b78:	fb 81       	ldd	r31, Y+3	; 0x03
 b7a:	80 81       	ld	r24, Z
 b7c:	ea 81       	ldd	r30, Y+2	; 0x02
 b7e:	fb 81       	ldd	r31, Y+3	; 0x03
 b80:	91 81       	ldd	r25, Z+1	; 0x01
 b82:	69 2f       	mov	r22, r25
 b84:	40 e0       	ldi	r20, 0x00	; 0
 b86:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 b8a:	89 83       	std	Y+1, r24	; 0x01
 b8c:	16 c0       	rjmp	.+44     	; 0xbba <LEDOFF+0x68>
		}
		else if(Copy_pstrLedID->LED_Connection == LED_SOURCE)
 b8e:	ea 81       	ldd	r30, Y+2	; 0x02
 b90:	fb 81       	ldd	r31, Y+3	; 0x03
 b92:	82 81       	ldd	r24, Z+2	; 0x02
 b94:	81 30       	cpi	r24, 0x01	; 1
 b96:	61 f4       	brne	.+24     	; 0xbb0 <LEDOFF+0x5e>
		{
			local_Error_state = DIO_PinValue(Copy_pstrLedID->LED_PortID, Copy_pstrLedID->LED_PinID, HIGH);
 b98:	ea 81       	ldd	r30, Y+2	; 0x02
 b9a:	fb 81       	ldd	r31, Y+3	; 0x03
 b9c:	80 81       	ld	r24, Z
 b9e:	ea 81       	ldd	r30, Y+2	; 0x02
 ba0:	fb 81       	ldd	r31, Y+3	; 0x03
 ba2:	91 81       	ldd	r25, Z+1	; 0x01
 ba4:	69 2f       	mov	r22, r25
 ba6:	41 e0       	ldi	r20, 0x01	; 1
 ba8:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 bac:	89 83       	std	Y+1, r24	; 0x01
 bae:	05 c0       	rjmp	.+10     	; 0xbba <LEDOFF+0x68>
		}
		else
		{
			local_Error_state = ES_OUT_OF_RANGE;
 bb0:	83 e0       	ldi	r24, 0x03	; 3
 bb2:	89 83       	std	Y+1, r24	; 0x01
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <LEDOFF+0x68>
		}
	}
	else
	{
		local_Error_state = ES_NULL_PIONTER;
 bb6:	82 e0       	ldi	r24, 0x02	; 2
 bb8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_Error_state;
 bba:	89 81       	ldd	r24, Y+1	; 0x01
}
 bbc:	0f 90       	pop	r0
 bbe:	0f 90       	pop	r0
 bc0:	0f 90       	pop	r0
 bc2:	cf 91       	pop	r28
 bc4:	df 91       	pop	r29
 bc6:	08 95       	ret

00000bc8 <Switch_enumInit>:
#include "SW_priv.h"

#include "DIO_inter.h"

ES_t Switch_enumInit(SW_t* Copy_AstrSwitch)
{
 bc8:	df 93       	push	r29
 bca:	cf 93       	push	r28
 bcc:	00 d0       	rcall	.+0      	; 0xbce <Switch_enumInit+0x6>
 bce:	00 d0       	rcall	.+0      	; 0xbd0 <Switch_enumInit+0x8>
 bd0:	cd b7       	in	r28, 0x3d	; 61
 bd2:	de b7       	in	r29, 0x3e	; 62
 bd4:	9c 83       	std	Y+4, r25	; 0x04
 bd6:	8b 83       	std	Y+3, r24	; 0x03
	ES_t local_Error_state = ES_NOK;
 bd8:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_AstrSwitch != NULL)
 bda:	8b 81       	ldd	r24, Y+3	; 0x03
 bdc:	9c 81       	ldd	r25, Y+4	; 0x04
 bde:	00 97       	sbiw	r24, 0x00	; 0
 be0:	09 f4       	brne	.+2      	; 0xbe4 <Switch_enumInit+0x1c>
 be2:	6b c0       	rjmp	.+214    	; 0xcba <Switch_enumInit+0xf2>
	{
		uint8 Local_counter = 0;
 be4:	19 82       	std	Y+1, r1	; 0x01
		for(Local_counter = 0; Local_counter < SW_NUM; Local_counter++)
 be6:	19 82       	std	Y+1, r1	; 0x01
 be8:	63 c0       	rjmp	.+198    	; 0xcb0 <Switch_enumInit+0xe8>
		{
			local_Error_state = DIO_PinDir(Copy_AstrSwitch[Local_counter].SW_portID, Copy_AstrSwitch[Local_counter].SW_pinID, Copy_AstrSwitch[Local_counter].SW_status);
 bea:	89 81       	ldd	r24, Y+1	; 0x01
 bec:	28 2f       	mov	r18, r24
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	c9 01       	movw	r24, r18
 bf2:	88 0f       	add	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	28 0f       	add	r18, r24
 bf8:	39 1f       	adc	r19, r25
 bfa:	8b 81       	ldd	r24, Y+3	; 0x03
 bfc:	9c 81       	ldd	r25, Y+4	; 0x04
 bfe:	fc 01       	movw	r30, r24
 c00:	e2 0f       	add	r30, r18
 c02:	f3 1f       	adc	r31, r19
 c04:	50 81       	ld	r21, Z
 c06:	89 81       	ldd	r24, Y+1	; 0x01
 c08:	28 2f       	mov	r18, r24
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	c9 01       	movw	r24, r18
 c0e:	88 0f       	add	r24, r24
 c10:	99 1f       	adc	r25, r25
 c12:	28 0f       	add	r18, r24
 c14:	39 1f       	adc	r19, r25
 c16:	8b 81       	ldd	r24, Y+3	; 0x03
 c18:	9c 81       	ldd	r25, Y+4	; 0x04
 c1a:	fc 01       	movw	r30, r24
 c1c:	e2 0f       	add	r30, r18
 c1e:	f3 1f       	adc	r31, r19
 c20:	41 81       	ldd	r20, Z+1	; 0x01
 c22:	89 81       	ldd	r24, Y+1	; 0x01
 c24:	28 2f       	mov	r18, r24
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	c9 01       	movw	r24, r18
 c2a:	88 0f       	add	r24, r24
 c2c:	99 1f       	adc	r25, r25
 c2e:	28 0f       	add	r18, r24
 c30:	39 1f       	adc	r19, r25
 c32:	8b 81       	ldd	r24, Y+3	; 0x03
 c34:	9c 81       	ldd	r25, Y+4	; 0x04
 c36:	fc 01       	movw	r30, r24
 c38:	e2 0f       	add	r30, r18
 c3a:	f3 1f       	adc	r31, r19
 c3c:	92 81       	ldd	r25, Z+2	; 0x02
 c3e:	85 2f       	mov	r24, r21
 c40:	64 2f       	mov	r22, r20
 c42:	49 2f       	mov	r20, r25
 c44:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_PinDir>
 c48:	8a 83       	std	Y+2, r24	; 0x02
			local_Error_state = DIO_PinValue(Copy_AstrSwitch[Local_counter].SW_portID, Copy_AstrSwitch[Local_counter].SW_pinID, Copy_AstrSwitch[Local_counter].SW_status);
 c4a:	89 81       	ldd	r24, Y+1	; 0x01
 c4c:	28 2f       	mov	r18, r24
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	c9 01       	movw	r24, r18
 c52:	88 0f       	add	r24, r24
 c54:	99 1f       	adc	r25, r25
 c56:	28 0f       	add	r18, r24
 c58:	39 1f       	adc	r19, r25
 c5a:	8b 81       	ldd	r24, Y+3	; 0x03
 c5c:	9c 81       	ldd	r25, Y+4	; 0x04
 c5e:	fc 01       	movw	r30, r24
 c60:	e2 0f       	add	r30, r18
 c62:	f3 1f       	adc	r31, r19
 c64:	50 81       	ld	r21, Z
 c66:	89 81       	ldd	r24, Y+1	; 0x01
 c68:	28 2f       	mov	r18, r24
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	c9 01       	movw	r24, r18
 c6e:	88 0f       	add	r24, r24
 c70:	99 1f       	adc	r25, r25
 c72:	28 0f       	add	r18, r24
 c74:	39 1f       	adc	r19, r25
 c76:	8b 81       	ldd	r24, Y+3	; 0x03
 c78:	9c 81       	ldd	r25, Y+4	; 0x04
 c7a:	fc 01       	movw	r30, r24
 c7c:	e2 0f       	add	r30, r18
 c7e:	f3 1f       	adc	r31, r19
 c80:	41 81       	ldd	r20, Z+1	; 0x01
 c82:	89 81       	ldd	r24, Y+1	; 0x01
 c84:	28 2f       	mov	r18, r24
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	c9 01       	movw	r24, r18
 c8a:	88 0f       	add	r24, r24
 c8c:	99 1f       	adc	r25, r25
 c8e:	28 0f       	add	r18, r24
 c90:	39 1f       	adc	r19, r25
 c92:	8b 81       	ldd	r24, Y+3	; 0x03
 c94:	9c 81       	ldd	r25, Y+4	; 0x04
 c96:	fc 01       	movw	r30, r24
 c98:	e2 0f       	add	r30, r18
 c9a:	f3 1f       	adc	r31, r19
 c9c:	92 81       	ldd	r25, Z+2	; 0x02
 c9e:	85 2f       	mov	r24, r21
 ca0:	64 2f       	mov	r22, r20
 ca2:	49 2f       	mov	r20, r25
 ca4:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 ca8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_Error_state = ES_NOK;

	if(Copy_AstrSwitch != NULL)
	{
		uint8 Local_counter = 0;
		for(Local_counter = 0; Local_counter < SW_NUM; Local_counter++)
 caa:	89 81       	ldd	r24, Y+1	; 0x01
 cac:	8f 5f       	subi	r24, 0xFF	; 255
 cae:	89 83       	std	Y+1, r24	; 0x01
 cb0:	89 81       	ldd	r24, Y+1	; 0x01
 cb2:	83 30       	cpi	r24, 0x03	; 3
 cb4:	08 f4       	brcc	.+2      	; 0xcb8 <Switch_enumInit+0xf0>
 cb6:	99 cf       	rjmp	.-206    	; 0xbea <Switch_enumInit+0x22>
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <Switch_enumInit+0xf6>
			local_Error_state = DIO_PinValue(Copy_AstrSwitch[Local_counter].SW_portID, Copy_AstrSwitch[Local_counter].SW_pinID, Copy_AstrSwitch[Local_counter].SW_status);
		}
	}
	else
	{
		local_Error_state = ES_NULL_PIONTER;
 cba:	82 e0       	ldi	r24, 0x02	; 2
 cbc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_Error_state;
 cbe:	8a 81       	ldd	r24, Y+2	; 0x02
}
 cc0:	0f 90       	pop	r0
 cc2:	0f 90       	pop	r0
 cc4:	0f 90       	pop	r0
 cc6:	0f 90       	pop	r0
 cc8:	cf 91       	pop	r28
 cca:	df 91       	pop	r29
 ccc:	08 95       	ret

00000cce <Switch_enumGetState>:


ES_t Switch_enumGetState(SW_t* Copy_AstrSwitch ,uint8* Copy_puint8SwState)
{
 cce:	df 93       	push	r29
 cd0:	cf 93       	push	r28
 cd2:	00 d0       	rcall	.+0      	; 0xcd4 <Switch_enumGetState+0x6>
 cd4:	00 d0       	rcall	.+0      	; 0xcd6 <Switch_enumGetState+0x8>
 cd6:	0f 92       	push	r0
 cd8:	cd b7       	in	r28, 0x3d	; 61
 cda:	de b7       	in	r29, 0x3e	; 62
 cdc:	9b 83       	std	Y+3, r25	; 0x03
 cde:	8a 83       	std	Y+2, r24	; 0x02
 ce0:	7d 83       	std	Y+5, r23	; 0x05
 ce2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t local_Error_state = ES_NOK;
 ce4:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_AstrSwitch != NULL) && (Copy_puint8SwState != NULL))
 ce6:	8a 81       	ldd	r24, Y+2	; 0x02
 ce8:	9b 81       	ldd	r25, Y+3	; 0x03
 cea:	00 97       	sbiw	r24, 0x00	; 0
 cec:	91 f0       	breq	.+36     	; 0xd12 <Switch_enumGetState+0x44>
 cee:	8c 81       	ldd	r24, Y+4	; 0x04
 cf0:	9d 81       	ldd	r25, Y+5	; 0x05
 cf2:	00 97       	sbiw	r24, 0x00	; 0
 cf4:	71 f0       	breq	.+28     	; 0xd12 <Switch_enumGetState+0x44>
	{
		local_Error_state = DIO_PinRead(Copy_AstrSwitch->SW_portID, Copy_AstrSwitch->SW_pinID, Copy_puint8SwState);
 cf6:	ea 81       	ldd	r30, Y+2	; 0x02
 cf8:	fb 81       	ldd	r31, Y+3	; 0x03
 cfa:	80 81       	ld	r24, Z
 cfc:	ea 81       	ldd	r30, Y+2	; 0x02
 cfe:	fb 81       	ldd	r31, Y+3	; 0x03
 d00:	91 81       	ldd	r25, Z+1	; 0x01
 d02:	2c 81       	ldd	r18, Y+4	; 0x04
 d04:	3d 81       	ldd	r19, Y+5	; 0x05
 d06:	69 2f       	mov	r22, r25
 d08:	a9 01       	movw	r20, r18
 d0a:	0e 94 0d 04 	call	0x81a	; 0x81a <DIO_PinRead>
 d0e:	89 83       	std	Y+1, r24	; 0x01
 d10:	02 c0       	rjmp	.+4      	; 0xd16 <Switch_enumGetState+0x48>
	}
	else
	{
		local_Error_state = ES_NULL_PIONTER;
 d12:	82 e0       	ldi	r24, 0x02	; 2
 d14:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_Error_state;
 d16:	89 81       	ldd	r24, Y+1	; 0x01
}
 d18:	0f 90       	pop	r0
 d1a:	0f 90       	pop	r0
 d1c:	0f 90       	pop	r0
 d1e:	0f 90       	pop	r0
 d20:	0f 90       	pop	r0
 d22:	cf 91       	pop	r28
 d24:	df 91       	pop	r29
 d26:	08 95       	ret

00000d28 <main>:
#include <util/delay.h>

extern SW_t switch_AstrSwitchState[SW_NUM];
//extern LED_t LED_AstrConfig[LED_NUM];
int main(void)
{
 d28:	df 93       	push	r29
 d2a:	cf 93       	push	r28
 d2c:	0f 92       	push	r0
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62
	DIO_intial();
 d32:	0e 94 41 00 	call	0x82	; 0x82 <DIO_intial>
	//LEDinit(LED_AstrConfig);
	Switch_enumInit(switch_AstrSwitchState);
 d36:	8c e6       	ldi	r24, 0x6C	; 108
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <Switch_enumInit>
	uint8 pin_state;

	while(1)
	{
		Switch_enumGetState(&switch_AstrSwitchState[1], &pin_state);
 d3e:	8f e6       	ldi	r24, 0x6F	; 111
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	9e 01       	movw	r18, r28
 d44:	2f 5f       	subi	r18, 0xFF	; 255
 d46:	3f 4f       	sbci	r19, 0xFF	; 255
 d48:	b9 01       	movw	r22, r18
 d4a:	0e 94 67 06 	call	0xcce	; 0xcce <Switch_enumGetState>
		if(pin_state == 0)
 d4e:	89 81       	ldd	r24, Y+1	; 0x01
 d50:	88 23       	and	r24, r24
 d52:	31 f4       	brne	.+12     	; 0xd60 <main+0x38>
		{
			DIO_PinValue(U_DIO_PORTA, PIN0, HIGH);
 d54:	80 e0       	ldi	r24, 0x00	; 0
 d56:	60 e0       	ldi	r22, 0x00	; 0
 d58:	41 e0       	ldi	r20, 0x01	; 1
 d5a:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
 d5e:	05 c0       	rjmp	.+10     	; 0xd6a <main+0x42>
		}
		else

		{
			DIO_PinValue(U_DIO_PORTA, PIN0, LOW);
 d60:	80 e0       	ldi	r24, 0x00	; 0
 d62:	60 e0       	ldi	r22, 0x00	; 0
 d64:	40 e0       	ldi	r20, 0x00	; 0
 d66:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_PinValue>
		}

		return 0;
 d6a:	80 e0       	ldi	r24, 0x00	; 0
 d6c:	90 e0       	ldi	r25, 0x00	; 0
	}

}
 d6e:	0f 90       	pop	r0
 d70:	cf 91       	pop	r28
 d72:	df 91       	pop	r29
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
