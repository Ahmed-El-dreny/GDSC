
3SW2LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000764  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define PIND *((volatile uint8*)0x30)

typedef unsigned char uint8;

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	uint8 pinState1 = ((PINB >> 0)&1), pinState2 = ((PINB >> 1)&1), pinState3 = ((PINB >> 2)&1);
  78:	e6 e3       	ldi	r30, 0x36	; 54
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	81 70       	andi	r24, 0x01	; 1
  80:	8b 83       	std	Y+3, r24	; 0x03
  82:	e6 e3       	ldi	r30, 0x36	; 54
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	86 95       	lsr	r24
  8a:	81 70       	andi	r24, 0x01	; 1
  8c:	8a 83       	std	Y+2, r24	; 0x02
  8e:	e6 e3       	ldi	r30, 0x36	; 54
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	86 95       	lsr	r24
  96:	86 95       	lsr	r24
  98:	81 70       	andi	r24, 0x01	; 1
  9a:	89 83       	std	Y+1, r24	; 0x01

	DDRB = 0;
  9c:	e7 e3       	ldi	r30, 0x37	; 55
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	PORTB = 255;
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24

	DDRA = 255;
  aa:	ea e3       	ldi	r30, 0x3A	; 58
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
	PORTA = 0;
  b2:	eb e3       	ldi	r30, 0x3B	; 59
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1

	while(1)
	{
		if(((PINB >> 0)&1) == 0)
  b8:	e6 e3       	ldi	r30, 0x36	; 54
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 2f       	mov	r24, r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	41 f4       	brne	.+16     	; 0xda <main+0x6e>
		{
			PORTA |= (1 << 0);
  ca:	ab e3       	ldi	r26, 0x3B	; 59
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	eb e3       	ldi	r30, 0x3B	; 59
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8c 93       	st	X, r24
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <main+0x7c>
		}
		else
		{
			PORTA &= ~(1 << 0);
  da:	ab e3       	ldi	r26, 0x3B	; 59
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	eb e3       	ldi	r30, 0x3B	; 59
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	8c 93       	st	X, r24
		}

		if(((PINB >> 1)&1) == 0)
  e8:	e6 e3       	ldi	r30, 0x36	; 54
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	86 95       	lsr	r24
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	90 70       	andi	r25, 0x00	; 0
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	41 f4       	brne	.+16     	; 0x10c <main+0xa0>
		{
			PORTA |= (1 << 1);
  fc:	ab e3       	ldi	r26, 0x3B	; 59
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	eb e3       	ldi	r30, 0x3B	; 59
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8c 93       	st	X, r24
 10a:	07 c0       	rjmp	.+14     	; 0x11a <main+0xae>
		}
		else
		{
			PORTA &= ~(1 << 1);
 10c:	ab e3       	ldi	r26, 0x3B	; 59
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	eb e3       	ldi	r30, 0x3B	; 59
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	8c 93       	st	X, r24
		}

		if(((PINB >> 2)&1) == 0)
 11a:	e6 e3       	ldi	r30, 0x36	; 54
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	86 95       	lsr	r24
 122:	86 95       	lsr	r24
 124:	88 2f       	mov	r24, r24
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	81 70       	andi	r24, 0x01	; 1
 12a:	90 70       	andi	r25, 0x00	; 0
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	79 f4       	brne	.+30     	; 0x14e <main+0xe2>
		{
			PORTA |= (1 << 0);
 130:	ab e3       	ldi	r26, 0x3B	; 59
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	eb e3       	ldi	r30, 0x3B	; 59
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	8c 93       	st	X, r24
			PORTA |= (1 << 1);
 13e:	ab e3       	ldi	r26, 0x3B	; 59
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	eb e3       	ldi	r30, 0x3B	; 59
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	8c 93       	st	X, r24
 14c:	b5 cf       	rjmp	.-150    	; 0xb8 <main+0x4c>
		}
		else
		{
			PORTA &= ~(1 << 0);
 14e:	ab e3       	ldi	r26, 0x3B	; 59
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	eb e3       	ldi	r30, 0x3B	; 59
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	8c 93       	st	X, r24
			PORTA &= ~(1 << 0);
 15c:	ab e3       	ldi	r26, 0x3B	; 59
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	eb e3       	ldi	r30, 0x3B	; 59
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	8c 93       	st	X, r24
 16a:	a6 cf       	rjmp	.-180    	; 0xb8 <main+0x4c>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
